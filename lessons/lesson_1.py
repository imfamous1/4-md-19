"""
Разработка ИТ проекта: 23 сентября.
0) Все установки происходит в venv (проверяйте в терминале). Если venv не активирован, то используйте:
source venv/bin/activate - для MacOS
.\venv\Scripts\Activate - для Windows
1) Установка телеграм библиотеки pip install pytelegrambotapi.
2) Установка .env файла для кредов pip install python-dotenv.
3) Декоратор - функция, которая позволяет изменить или расширить поведение другой функции или
метода без изменения ее кода.
def stars_decorator(func):
    def wrapper():
        print('****')
        func()
        print('****')
    return wrapper


@stars_decorator
def test():
    print("hello!")


test()

4) bot.polling(none_stop=True) - метод в библиотеке pyTelegramBotApi, который запускает постоянную
проверку новых сообщений (опрос) от Telegram.
    – none_stop=True - бот продолжает опрашивать сервер Telegram, даже при возникновении ошибок
Другие параметры:
    – interval=<seconds> - устанавливает интервал между запросами к серверу
    – timeout=<seconds> - устанавливает время ожидания от сервера (если слишком долго, то сессия заканчивается)
    – allowed_updates=<list> - фильтр для типов обновлений, которые бот должен получать

none_stop=True - подходит для простых ботов, которые должны работать непрерывно без сложных обработок ошибок, для сложных
лучше использовать webhooks (вебхуки)

Webhooks - механизм, при котором Telegram сам отправляет уведомления о новых сообщениях на сервер бота по заданному URL,
вместо того, чтобы бот постоянно опрашивал сервер, как это делается с polling.
    а) настраиваете url вашего сервера, который Telegram будет использовать для отправки обновлений
    б) когда пользователь отправляет сообщение боту, Telegram немедленно отправляет POST-запрос на этот URL с данными
    в) сервер обрабатывает это сообщение и отправляет ответ обратно

Преимущества: меньшая нагрузка на сервер, быстрота, экономия ресурсов

5) message_handler - обычно является декоратором, который применяется к функции, чтобы указать, что данная функция должна
обрабатывать входящие сообщения, соответствующие определенным критериям.
6) register_message_handler - может быть методом объекта бота или частью библиотеки, который регистрирует функцию
как обработчик сообщений без использования декоратора.
7) sqlite3 - модуль в стандартной библиотеке Python, который предоставляет интерфейс для работы с базами данных SQLite.
SQLite - легковесная дисковая база, не требующая отдельного серверного процесса.
– метод сonnect - используется для установления соединения с базой, если файл базы данных не существует, то он будет создан.
– после установления соединения с базой через объект connection, вызов метода cursor() создает объект курсора.
Курсор используется для выполнения sql-запросов к базе данных и обработки результатов этих запросов.
8) Создайте файл requirements.txt выполнив pip freeze > requirements.txt, это создаст файл с зависимостями.
Когда он потребуется, выполните в терминале (в venv) - pip install -r requirements.txt
9) README.md - обычно пишется в формате markdown (.md), который позволяет легко форматировать текст, вставлять ссылки,
изображения, заголовки и т.д. Обычно в него включают: название проекта, описание, установка, использование, как внести
вклад (улучшить проект), лицензия.
10) Два метода fetchone и fetchall используются после выполнения запросов типа SELECT для получения и обработки.
.fetchone() – извлекает следующую строку результата выполнения запроса, возвращая одиночную запись или None, если больше
нет доступных записей.
.fetchall() - извлекает все строки результата выполнения запроса и возвращает их в виде списка (или другой коллекции).
"""

